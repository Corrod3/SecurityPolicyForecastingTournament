# with minium Forecasting time: T test for Hyppthesis 1b
t.test.brier.mct.time <- paste("t(", cor.test(SPFT.Time$brier.avg, SPFT.Time$mct.c)[[2]],
") = ",
round(cor.test(SPFT.Time$brier.avg, SPFT.Time$mct.c)[[1]], 2),
", p = ",
round(cor.test(SPFT.Time$brier.avg, SPFT.Time$mct.c)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.mct.time <- paste("r = ",
round(cor(SPFT.Time$brier.avg, SPFT.Time$mct.c, use="complete.obs"), 2),
", ", t.test.brier.mct.time,
sep = "")
# Hypothesis 2 ################################################################
# T test for Hypothesis 2
t.test.brier.time <- paste("t(",
cor.test(SPFT$brier.avg,
SPFT$time.fq.sec.log)[[2]],
") = ",
round(cor.test(SPFT$brier.avg,
SPFT$time.fq.sec.log)[[1]], 2),
", p = ",
round(cor.test(SPFT$brier.avg,
SPFT$time.fq.sec.log)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.time <- paste("r = ",
round(cor(SPFT$brier.avg,
SPFT$time.fq.sec.log, use="complete.obs"),2),
", ",
t.test.brier.time,
sep = "")
#
cor.brier.time.linear <- paste("r = ",
round(cor(SPFT$brier.avg,
SPFT$time.fq.sec, use="complete.obs"),2)
, sep = "")
# scatterplot with non-linear regression line
# Source: http://stackoverflow.com/questions/37329074/geom-smooth-and-exponential-fits
log.model <- lm(brier.avg ~ log(time.fq.sec), SPFT)
log.model.df <- data.frame(x = SPFT$time.fq.sec[!is.na(SPFT$time.fq.sec)],
y = fitted(log.model))
cor.brier.time.plot <- ggplot(filter(SPFT, !is.na(time.fq.sec)),
aes(x=time.fq.sec, y=brier.avg)) +
geom_point(shape=1) +    # Use hollow circles
#  geom_smooth(method="lm",  linetype = 2, color = "#C02F39") +
# geom_smooth(method=lm, color = "#C02F39") +   # Add linear regression line
geom_line(data = log.model.df,
aes(x, y, color = "Log Model"),
size = 2, linetype = 1, color = "#C02F39") +
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs(x = "time in min (linear)",
y = "Brier score") # labels
cor.brier.time.log.plot <- ggplot(filter(SPFT, !is.na(time.fq.sec)),
aes(x=time.fq.sec.log, y=brier.avg)) +
geom_point(shape=1) +    # Use hollow circles
#  geom_smooth(method="lm",  linetype = 1) +
geom_smooth(method=lm, color = "#C02F39", size = 2) +   # Add linear regression line
#  geom_line(data = log.model.df,
#            aes(x, y, color = "Log Model"),
#            size = 1, linetype = 2) +
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs(x = "log(time)",
y = "Brier score") # labels
# Hypothesis 3 ################################################################
# get rid of empthy factor levels
SPFT$Group <- as.factor(as.character(SPFT$Group))
t.test.intervention <- t.test(x = select(filter(SPFT, Group == "Treatment"), brier.avg),
y = select(filter(SPFT, Group == "Control"), brier.avg),
alternative = "less", var.equal = T,
conf.level = 0.95)
t.test.intervention.result <- paste("t(", t.test.intervention[[2]], ") = ",
round(t.test.intervention[[1]],2),
", p < ",
ifelse(round(t.test.intervention[[3]],4)< 0.001,
0.001,round(t.test.intervention[[3]],4)),
sep = "")
# testing reasons for failure
hypo3.time.plot <- ggplot(filter(SPFT, is.na(time.fq.sec.log) == FALSE),
aes(x = time.fq.sec.log, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( x = "log(time)",
y = "Frequency") # labels))
# t testing whether the treatment had any impact on the time spend on forecasting
t.test.int.time <-  t.test(SPFT$time.fq.sec.log[SPFT$Group == "Treatment"],
SPFT$time.fq.sec.log[SPFT$Group == "Control"],
alternative = "greater", var.equal = TRUE,
conf.level = 0.95)
t.test.intervention.time <- paste(round(t.test.int.time[[5]][1],2),
" > ",
round(t.test.int.time[[5]][2],2),
", t(", t.test.int.time[[2]], ") = ",
round(t.test.int.time[[1]],2),
", p < ",
ifelse(round(t.test.int.time[[3]],4)< 0.001,
0.001,round(t.test.int.time[[3]],4)),
sep = "")
###############################################################################
# 9. Aggregating Forecasts
###############################################################################
# Mean Estimates for each question ############################################
probs.mean <- SPFT %>% select(starts_with("fq")) %>% colMeans()
# mean brier score for average probabilities (unweighted)
bs.mean <- round(mean(brierScore(probs.mean, FQ[,4])),2)
# testing average brier score vs. brier score of averaged forecasts
t.test.bs.avg.mean <- t.test(SPFT$brier.avg, mu = bs.mean, alternative = "greater")
# string for paper
t.test.bs.avg.mean  <- paste("t(", t.test.bs.avg.mean[[2]], ") = ",
round(t.test.bs.avg.mean[[1]],2),
", p < ",
ifelse(round(t.test.bs.avg.mean[[3]],4)< 0.001,
0.001,round(t.test.bs.avg.mean[[3]],4)),
sep = "")
# 0. Subsample of (super)forecasters ##########################################
# drop BNT score 0,1 and 25% lowest share of time spend on forecasting
probs.mean.agg0 <- SPFT %>%
filter(bnt.s > 2 & time.fq.sec.log > summary(SPFT$time.fq.sec.log)[3]) %>%
select(starts_with("fq")) %>% colMeans()
# brier score of the aggregated forecasts from the sub group.
bs.cutoff.mean <- round(mean(brierScore(probs.mean.agg0, FQ[,4])),2)
# average brier score of the sub group
bs.agg0 <- 0
for(i in 1:nrow(FQ)){
bs.agg0[i] <- SPFT %>%
filter(bnt.s > 1 & time.fq.sec.log > summary(SPFT$time.fq.sec.log)[2]) %>%
dplyr::select(contains(paste("fq",i,"_1", sep= ""))) %>%
brierScore(as.numeric(FQ[i,4])) %>% as.vector() %>% mean()
}
# mean brier score of group smaller group
bs.cutoff <- round(mean(bs.agg0),2)
# 1. computing individual weights #############################################
SPFT.agg1 <- SPFT %>% select(starts_with("fq"), bnt.s,mct.c, time.fq.sec.log,
Group, brier.avg) %>%
filter(!is.na(time.fq.sec.log))
# pre-calculations to see correlations
# lm(brier.avg ~ bnt.s, data = SPFT.agg1)
# lm(brier.avg ~ time.fq.sec.log, data = SPFT.agg1)
reg.brier.bnt.time <- lm(brier.avg ~ bnt.s + time.fq.sec.log, data = SPFT.agg1)
# SPFT.agg1$d <-  0
# SPFT.agg1$d[SPFT.agg1$Group == "Treatment"] <- 1
# lm(brier.avg ~ bnt.s + mct.c + time.fq.sec.log + d, data = SPFT.agg1)
# weightening using only BNT score
# simplest version: weight = score
# SPFT$w.bnt <- SPFT$bnt.s
probs.mean.w.bnt <- apply(select(SPFT.agg1, starts_with("fq")), 2,
weighted.mean, w = SPFT.agg1$bnt.s)
mean(brierScore(probs.mean.w.bnt, FQ[,4]))
# weightening using only time.fq.sec.log score
probs.mean.w.time <- apply(select(SPFT.agg1, starts_with("fq")), 2,
weighted.mean, w = SPFT.agg1$time.fq.sec.log)
mean(brierScore(probs.mean.w.time, FQ[,4]))
# weightening using bnt and time.fq.sec.log score #############################
# contruct weigts (other weights possible)
# SPFT.agg1$w.bnt.time <- reg.brier.bnt.time[[1]][2]*SPFT.agg1$bnt.s +
#                        reg.brier.bnt.time[[1]][3]*SPFT.agg1$time.fq.sec.log
SPFT.agg1$w.bnt.time <- SPFT.agg1$bnt.s * SPFT.agg1$time.fq.sec.log
# weighted probabilties
probs.mean.w.bnt.time <- apply(select(SPFT.agg1, starts_with("fq")),
2, weighted.mean, w = SPFT.agg1$w.bnt.time)
# brier score of weigthed probabities
bs.mean.w.bnt.time <- round(mean(brierScore(probs.mean.w.bnt.time, FQ[,4])),2)
# 2. extremizing  #############################################################
# like Satopaa et al 2014
#create data.frame for extremizing (remove 0 and 1 as logit will cause problems)
SPFT.agg2 <- SPFT %>% select(starts_with("fq")) %>% as.matrix()
SPFT.agg2[SPFT.agg2 == 0] <- 0.001
SPFT.agg2[SPFT.agg2 == 1] <- 0.999
# function to create extremized means for each question
# possible to include geometric weights (q^w) -> check theory
probsLogitExtrem <-function(p,a){
q<-p/(1-p)
geo.mean<-prod(q^(1/length(q))) # every element to the power of N?
mod.prob<-(geo.mean^a)/(1+geo.mean^a)
return(mod.prob)
}
# true outcomes
Z<- as.vector(as.matrix(FQ[,4]))
# brier score average
brierScoresAvg<-function(p,z){
return(sum((p-z)^2)/length(p) + sum((z-p)^2)/length(p))
}
# optimize brier score average function to find minimizing a (bias correction)
bias.a <- optimise(function(a) brierScoresAvg(apply(SPFT.agg2,
2,
function(z) probsLogitExtrem(z, a)),
Z),
interval=c(0,10))
# plot brierscore depending on bias correction
a<-seq(-1,5,by=0.1)
plot(a,sapply(a,
function(l) brierScoresAvg(apply(SPFT.agg2,
2,
function(z) probsLogitExtrem(z, l)),
Z)),
type = "l",lwd=2, col="#C02F39",
xlab="Systematic Bias a",
ylab="Brier score")
brier.ext.plot <- recordPlot()
# p <- ggplot(data = data.frame(a = 0), mapping = aes(x = a))
# fun.1 <- function(a) a^2 + a
# fun.2 <- function(l) brierScoresAvg(apply(SPFT.agg2,2,function(z) probsLogitExtrem(z, l)),Z)
# p + stat_function(fun = fun.1) + xlim(-5,5)
# p + stat_function(fun = fun.2) + xlim(0,5)
# compute aggregated probabilities
probs.extrem<-apply(SPFT.agg2,2,function(z) probsLogitExtrem(z, a=bias.a$minimum))
# plot simple means against extremized values
plot(probs.mean, probs.extrem, asp=1,ylim=c(0,1),xlim=c(0,1))
abline(0,1,lty=2)
# points(Z,probs.mean,col=2,pch=16)
# 3. combining aggregation and weightening ###################################
# 4. displaying aggregated forecasts #########################################
# plot with aggregated probabilties
# add: labels for vlines
# vlines at the wrong place, e.g. for 13 the extremized value is above .5
agg.plot <- function(q) {
ggplot(SPFT, aes(x=eval(parse(text = fq[q])))) +
geom_density(alpha=.3, fill="#C02F39") +
geom_vline(data=SPFT,
aes(xintercept=mean(eval(parse(text = fq[q])))),
linetype="dashed", size=1.5) + # group average
# vertical line for dropping case
geom_vline(data=filter(SPFT, bnt.s > 1 &
time.fq.sec.log > summary(SPFT$time.fq.sec.log)[2]),
aes(xintercept=mean(eval(parse(text = fq[q])))),
linetype="dashed", size=1.5, color = "yellow") + # group average
# vertical line for weighted probabilities
geom_vline(aes(xintercept=probs.mean.w.bnt.time[q]),
linetype="dashed", size=1.5, color = "orange") + # group average
# vertical line for extremized probability
geom_vline(aes(xintercept=probs.extrem[q]),
linetype="dashed", size=1.5, color = "red") + # group average
labs(title = sapply(strwrap(as.character(FQ[q,2]), 40, simplify=FALSE),
paste, collapse="\n" ),
x = "What is the probability of this event to happen?",
y = "Distribution of estimates") + # labels
expand_limits(x=c(0,1)) + # set range of x-axis
theme_bw() +
scale_x_continuous(labels=percent) # percentages
}
agg.plot(13)
###############################################################################
# 10. presentation forecasts
###############################################################################
# plot scores distributed by groups
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = x)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
}
# formulars for trying out
# brierPlot(as.factor(SPFT$team))
# summary(as.factor(SPFT$team))
View(SB.Hertie)
print(xtable(select(SB.Hertie, id.hertie, brier.avg)), type="html")
knitr::opts_chunk$set(echo = FALSE)
# Clear Global environment
rm(list=ls())
## Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
source("main.R")
xtable(head(select(SB.Hertie, id.hertie, brier.avg)),10)
?xtable
?kable
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
knitr::opts_chunk$set(echo = FALSE)
# Clear Global environment
rm(list=ls())
## Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
library(knitr)
source("main.R")
response.hertie(1)
response.hertie2(1)
response.all(1)
response.all2(1)
response.hertie(1)
response.hertie(2)
response.hertie(3)
response.hertie(4)
response.hertie(5)
response.hertie(6)
response.hertie(7)
response.hertie(8)
response.hertie(9)
response.hertie(10)
response.hertie(11)
response.hertie(12)
response.hertie(13)
response.hertie(14)
response.hertie(15)
response.hertie(16)
response.hertie(17)
response.hertie(18)
response.hertie(19)
response.hertie(20)
response.hertie(21)
response.hertie(22)
response.hertie(23)
response.hertie(24)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html", border = 1)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html", border = "1")
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html", border = "1")
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
install.packages("formattable")
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF
##   Ticker       Name     Value Change
## 1         Dow Jones 15,988.08 -2.39%
## 2           S&P 500  1,880.33 -2.16%
## 3        Technology        NA  2.10%
## 4    IBM        IBM    130.00 -2.19%
## 5   AAPL      Apple     97.05 -2.48%
## 6   MSFT  Microsoft     50.99 -3.99%
formattable(DF, list(
Name=formatter(
"span",
style = x ~ ifelse(x == "Technology",
style(font.weight = "bold"), NA)),
Value = color_tile("white", "orange"),
Change = formatter(
"span",
style = x ~ style(color = ifelse(x < 0 , "red", "green")),
x ~ icontext(ifelse(x < 0, "arrow-down", "arrow-up"), x)))
)
DF2 <- head(select(SB.Hertie, id.hertie, brier.avg),10)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF2 <- head(select(SB.Hertie, id.hertie, brier.avg),10)
formattable(DF2,
list(Name=formatter("span",
style = x ~ ifelse(x == "Technology",
style(font.weight = "bold"),
NA)
),
Value = color_tile("white", "orange")
#                 ,Change = formatter("span",
#                                    style = x ~ style(color = ifelse(x < 0 , "red", "green")),
#                                    x ~ icontext(ifelse(x < 0, "arrow-down", "arrow-up"), x)
#                                    )
)
)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF2 <- cbind(1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
formattable(DF2,
list(Name=formatter("span",
style = x ~ ifelse(x == "Technology",
style(font.weight = "bold"),
NA)
),
Value = color_tile("white", "orange")
#                 ,Change = formatter("span",
#                                    style = x ~ style(color = ifelse(x < 0 , "red", "green")),
#                                    x ~ icontext(ifelse(x < 0, "arrow-down", "arrow-up"), x)
#                                    )
)
)
format_table(mtcars,
list(mpg = formatter("span", style = "color:red")))
format_table(mtcars,
list(mpg = formatter("span", style = "color:red")))
format_table(mtcars, list(mpg = formatter("span",
style = x ~ style(color = rgb(x/max(x), 0, 0)))))
format_table(mtcars, list(mpg = formatter("span",
style = x ~ style(display = "block",
"border-radius" = "4px",
"padding-right" = "4px",
color = "white",
"background-color" = rgb(x/max(x), 0, 0)))))
format_table(mtcars, list(area(col = vs:carb) ~ formatter("span",
style = x ~ style(color = ifelse(x > 0, "red", NA)))))
df <- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10))
format_table(df, list(area() ~ color_tile("transparent", "lightgray")))
format_table(df, list(area(1:5) ~ color_tile("transparent", "lightgray")))
format_table(df, list(area(1:5) ~ color_tile("transparent", "lightgray"),
area(6:10) ~ color_tile("transparent", "lightpink")))
df <- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10))
format_table(df, list(area() ~ color_tile("transparent", "lightgray")))
df <- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10))
format_table(df, list(area() ~ color_tile("transparent", "#C02F39")))
df <- data.frame(a = rnorm(10), b = rnorm(10), c = rnorm(10))
format_table(DF2, list(area() ~ color_tile("transparent", "#C02F39")))
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF2 <- cbind(1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
formattable(DF2,
list(id.hertie=formatter("span",style = "color:red"),
brier.avg = color_tile("white", "orange")
)
)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF2 <- cbind(1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
formattable(DF2,
list(id.hertie=formatter("span",style = "color:red"),
brier.avg = color_tile("#C02F39", "white")
)
)
DF2 <- cbind(rank = 1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
View(DF2)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF2 <- cbind(rank = 1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
formattable(DF2,
list(rank = color_tile("#C02F39", "white"),
id.hertie=formatter("span",style = "color:red"),
)
)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF <- data.frame(Ticker=c("", "", "", "IBM", "AAPL", "MSFT"),
Name=c("Dow Jones", "S&P 500", "Technology",
"IBM", "Apple", "Microsoft"),
Value=accounting(c(15988.08, 1880.33, NA,
130.00, 97.05, 50.99)),
Change=percent(c(-0.0239, -0.0216, 0.021,
-0.0219, -0.0248, -0.0399)))
DF2 <- cbind(rank = 1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
formattable(DF2,
list(rank = color_tile("#C02F39", "white"),
id.hertie=formatter("span",style = "color:red")
)
)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
#kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
library(formattable)
DF2 <- cbind(rank = 1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
formattable(DF2,
list(rank = color_tile("#C02F39", "white")
)
)
# print(xtable(head(select(SB.Hertie, id.hertie, brier.avg),10)), type="html", border = "1")
kable(head(select(SB.Hertie, id.hertie, brier.avg),10), format = "html")
#library(formattable)
#DF2 <- cbind(rank = 1:10, head(select(SB.Hertie, id.hertie, brier.avg),10))
#formattable(DF2,
#            list(rank = color_tile("#C02F39", "white")
#                 )
#)
SB.Hertie %>% select(id.hertie, brier.avg) %>% head(10) %>% kable(format = "html")
View(SB.Hertie)
SB.Hertie %>% select(id.hertie, brier.avg) %>% head(10) %>% mutate(rank = row_number())
View(SB)
View(SB)
