geom_bar() +
coord_flip() +
labs(title = "Education",
x = "Education",
y = "# of respondents") # labels
# employment ##################################################################
emp.plot <- ggplot(SPFT, aes(x = emp)) +
geom_bar() +
coord_flip() +
labs(title = "Employment / occupation",
x = "Occupation",
y = "# of respondents") # labels
# summary table for all numerical variables ###################################
# move it to the online appendix
# stargazer(select(SPFT, bnt.s, mct.c, time.fq.sec, Duration.min, age),
#          type="html", out = "DescStat.html")
###############################################################################
# 8. Testing
###############################################################################
# Skill vs. Luck ##############################################################
# Compute expected Brier score for p = 0.5 for each question
# 1. Individual Brier score for each possible outcome (0 or 1)
# 2. Calculate average for each question
# 3. Calculate average over all questions
brier.exp.fq <- 0
for(i in 1:q.num){
brier.exp.fq[i] <- mean(2*((select(SB, i+4))^2 + (1 - select(SB, i+4))^2 )/2)
}
# T-Test one-sided (Expected Brier score with p = 50%)
t.test.against.random  <- t.test(SPFT$brier.avg, mu = mean(brier.exp.fq),
alternative = "less", conf.level=0.95)
# get text string for the paper
t.test.against.random  <- paste("t(", t.test.against.random[[2]], ") = ",
round(t.test.against.random[[1]],2),
", p < ",
ifelse(round(t.test.against.random[[3]],4)< 0.001,
0.001,round(t.test.against.random[[3]],4)),
sep = "")
# alternative skills vs. luck test: correct side of 50% #######################
# score board for correct side
SB.CS <- SPFT  %>% select(ResponseId, id.hertie, id.other, id.mturk,
starts_with("fq"))
## calculate correct side scores for each question/respondent
# i <- 1
for(i in 1:q.num){
tmp <- paste("fq", i, sep = "")
# add outcome with 1 of on correct side of 50% and 0 if not
SB.CS[,paste(tmp,"cs", sep = ".")] <-
ifelse(abs(as.numeric(FQ[FQ[,1] == tmp, 4]) - select(SB.CS, i+4)) > 0.5,0,1)
rm(tmp)
}
# individual share of being on the correct side with the forecast
SB.CS[,"cs.avg"] <- rowMeans(select(SB.CS, contains("cs")))
# One-sided T-Testing correct side measure
t.test.correct.side <- t.test(SB.CS$cs.avg, mu=0.5, alternative = "greater",
conf.level = 0.95, equal.var = T)
# string for paper
t.test.correct.side  <- paste("t(", t.test.correct.side[[2]], ") = ",
round(t.test.correct.side[[1]],2),
", p < ",
ifelse(round(t.test.correct.side[[3]],4)< 0.001,
0.001,round(t.test.correct.side[[3]],4)),
sep = "")
# Hypotheses testing ##########################################################
# function to generate a correlation matrix
# Source: http://myowelt.blogspot.de/2008/04/beautiful-correlation-tables-in-r.html
corstarsl <- function(x){
require(Hmisc)
x <- as.matrix(x)
R <- rcorr(x)$r
p <- rcorr(x)$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "***",
ifelse(p < .01, "** ",
ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
# remove comment from xtable
options(xtable.comment = FALSE)
# compute log(time)
SPFT$time.fq.sec.log <- log(SPFT$time.fq.sec)
# correlation table with significant test
cor.table <- corstarsl(select(SPFT, brier.avg, bnt.s, mct.c, time.fq.sec.log))
names(cor.table) <- c("Brier score", "BNT score", "MCT score")
rownames(cor.table) <- c("Brier score", "BNT score", "MCT score", "log(time)")
# table to Latex format
cor.plot <- xtable(cor.table, caption = "Correlation Table")
# complete correlation table for data mining
# SPFT$selfassessment.num <- as.numeric(SPFT$selfassessment)
# cor.plot2 <- xtable(corstarsl(select(SPFT, brier.avg, bnt.s, mct.c, time.fq.sec,
#                                     time.fq.sec.log, time.min, source.var, age, selfassessment.num)),
#                   caption = "Correlation Table")
# testing only for subgroups
SPFT.Time <- SPFT %>% select(brier.avg, bnt.s, mct.c, time.fq.sec, Group) %>% filter(time.fq.sec > 6)
SPFT.Anal <- SPFT %>% select(brier.avg, bnt.s, mct.c, time.fq.sec, Group) %>% filter(time.fq.sec > 6)
# Hypothesis 1a ################################################################
# t test manual
cor(SPFT$brier.avg, SPFT$bnt.s)*
((length(SPFT$bnt.s)-2)/(1 - cor(SPFT$brier.avg, SPFT$bnt.s)^2))^(1/2)
# T test for Hyppthesis 1a
t.test.brier.bnt <- paste("t(", cor.test(SPFT$brier.avg, SPFT$bnt.s)[[2]],
") = ",
round(cor.test(SPFT$brier.avg, SPFT$bnt.s)[[1]], 2),
", p = ",
round(cor.test(SPFT$brier.avg, SPFT$bnt.s)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.bnt <- paste("r = ", round(cor(SPFT$brier.avg, SPFT$bnt.s),2), ", ",
t.test.brier.bnt, sep = "")
# Test with only long decision time
# T test for Hyppthesis 1a
t.test.brier.bnt.time <- paste("t(", cor.test(SPFT.Time$brier.avg, SPFT.Time$bnt.s)[[2]],
") = ",
round(cor.test(SPFT.Time$brier.avg, SPFT.Time$bnt.s)[[1]], 2),
", p = ",
round(cor.test(SPFT.Time$brier.avg, SPFT.Time$bnt.s)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.bnt.time <- paste("r = ", round(cor(SPFT.Time$brier.avg, SPFT.Time$bnt.s),2), ", ",
t.test.brier.bnt.time, sep = "")
# Hypothesis 1b ###############################################################
# T test for Hyppthesis 1b
t.test.brier.mct <- paste("t(", cor.test(SPFT$brier.avg, SPFT$mct.c)[[2]],
") = ",
round(cor.test(SPFT$brier.avg, SPFT$mct.c)[[1]], 2),
", p = ",
round(cor.test(SPFT$brier.avg, SPFT$mct.c)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.mct <- paste("r = ",
round(cor(SPFT$brier.avg, SPFT$mct.c, use="complete.obs"), 2),
", ", t.test.brier.mct,
sep = "")
# Scatterplot for Hypothesis
cor.brier.mct.plot <- ggplot(filter(SPFT, !is.na(mct.c)), aes(x=mct.c, y=brier.avg)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm, color = "#C02F39") +   # Add linear regression line
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs(x = "Moral Competency Score",
y = "Brier Score") # labels
# with minium Forecasting time: T test for Hyppthesis 1b
t.test.brier.mct.time <- paste("t(", cor.test(SPFT.Time$brier.avg, SPFT.Time$mct.c)[[2]],
") = ",
round(cor.test(SPFT.Time$brier.avg, SPFT.Time$mct.c)[[1]], 2),
", p = ",
round(cor.test(SPFT.Time$brier.avg, SPFT.Time$mct.c)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.mct.time <- paste("r = ",
round(cor(SPFT.Time$brier.avg, SPFT.Time$mct.c, use="complete.obs"), 2),
", ", t.test.brier.mct.time,
sep = "")
# Hypothesis 2 ################################################################
# T test for Hypothesis 2
t.test.brier.time <- paste("t(",
cor.test(SPFT$brier.avg,
SPFT$time.fq.sec.log)[[2]],
") = ",
round(cor.test(SPFT$brier.avg,
SPFT$time.fq.sec.log)[[1]], 2),
", p = ",
round(cor.test(SPFT$brier.avg,
SPFT$time.fq.sec.log)[[3]], 3),
sep = "")
# Correlation between Brier score and BNT score
cor.brier.time <- paste("r = ",
round(cor(SPFT$brier.avg,
SPFT$time.fq.sec.log, use="complete.obs"),2),
", ",
t.test.brier.time,
sep = "")
#
cor.brier.time.linear <- paste("r = ",
round(cor(SPFT$brier.avg,
SPFT$time.fq.sec, use="complete.obs"),2)
, sep = "")
# scatterplot with non-linear regression line
# Source: http://stackoverflow.com/questions/37329074/geom-smooth-and-exponential-fits
log.model <- lm(brier.avg ~ log(time.fq.sec), SPFT)
log.model.df <- data.frame(x = SPFT$time.fq.sec[!is.na(SPFT$time.fq.sec)],
y = fitted(log.model))
cor.brier.time.plot <- ggplot(filter(SPFT, !is.na(time.fq.sec)),
aes(x=time.fq.sec, y=brier.avg)) +
geom_point(shape=1) +    # Use hollow circles
#  geom_smooth(method="lm",  linetype = 2, color = "#C02F39") +
# geom_smooth(method=lm, color = "#C02F39") +   # Add linear regression line
geom_line(data = log.model.df,
aes(x, y, color = "Log Model"),
size = 2, linetype = 1, color = "#C02F39") +
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs(x = "time",
y = "Brier score") # labels
cor.brier.time.log.plot <- ggplot(filter(SPFT, !is.na(time.fq.sec)),
aes(x=time.fq.sec.log, y=brier.avg)) +
geom_point(shape=1) +    # Use hollow circles
#  geom_smooth(method="lm",  linetype = 1) +
geom_smooth(method=lm, color = "#C02F39", size = 2) +   # Add linear regression line
#  geom_line(data = log.model.df,
#            aes(x, y, color = "Log Model"),
#            size = 1, linetype = 2) +
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs(x = "log(time)",
y = "Brier score") # labels
# Hypothesis 3 ################################################################
# get rid of empthy factor levels
SPFT$Group <- as.factor(as.character(SPFT$Group))
t.test.intervention <- t.test(x = select(filter(SPFT, Group == "Treatment"), brier.avg),
y = select(filter(SPFT, Group == "Control"), brier.avg),
alternative = "less", var.equal = T,
conf.level = 0.95)
t.test.intervention.result <- paste("t(", t.test.intervention[[2]], ") = ",
round(t.test.intervention[[1]],2),
", p < ",
ifelse(round(t.test.intervention[[3]],4)< 0.001,
0.001,round(t.test.intervention[[3]],4)),
sep = "")
###############################################################################
# 9. Aggregating Forecasts
###############################################################################
# drop BNT score 0 and 25% lowest share of time spend on forecasting
SPFT.Agg <- SPFT %>% filter(bnt.s != 0 & time.fq.sec.log > summary(SPFT$time.fq.sec.log)[2])
# weightening using time and BNT score
# extremizing values
ggplot(SPFT, aes(x = brier.avg, fill = part.group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
brier.plot2 <- ggplot(SPFT, aes(x = brier.avg, fill = exp.sp)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
brier.plot2
brierPlot <- function(sub){ggplot(SPFT, aes(x = brier.avg, fill = sub)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(part.group)
brierPlot <- function(sub){ggplot(SPFT, aes(x = brier.avg, fill = eval(parse(text = sub)))) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(part.group)
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = eval(parse(text = x)))) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(part.group)
x <- "part.group"
eval(parse(text = x))
x <- "SPFT$part.group"
eval(parse(text = x))
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = eval(parse(text = x)))) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(SPFT$part.group)
ggplot(SPFT, aes(x = brier.avg, fill = eval(parse(text = x)))) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = eval(parse(text = x)))) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(SPFT$part.group)
brierPlot("SPFT$part.group")
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = x)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(SPFT$part.group)
brierPlot(SPFT$exp.sp)
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = x)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", name(x)),
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(SPFT$exp.sp)
name(SPFT$exp.sp)
names(SPFT$exp.sp)
col_names(SPFT$exp.sp)
colnames(SPFT$exp.sp)
value(SPFT$exp.sp)
colnames(SPFT$exp.sp)
SPFT$exp.sp
str(SPFT$exp.sp)
summary(SPFT$exp.sp)
sub(".*$", "", "SPFT$exp.sp")
substring("SPFT$exp.sp", 5)
brierPlot <- function(x){ggplot(SPFT, aes(x = brier.avg, fill = x)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
}
brierPlot(SPFT$exp.sp)
brierPlot(SPFT$exp)
brierPlot(SPFT$intu.anal)
View(SPFT)
brierPlot(SPFT$source.var)
SPFT$source.var
brierPlot(as.factor(SPFT$source.var))
SPFT <- SPFT %>% filter(source.var < 5)
brierPlot(as.factor(SPFT$source.var))
brierPlot(as.factor(SPFT$sex))
brierPlot(as.factor(SPFT$age.gr))
brierPlot(as.factor(SPFT$emp))
brierPlot(as.factor(SPFT$edu))
summary(SPFT$edu)
summary(as.factor(SPFT$edu))
brierPlot(as.factor(SPFT$time))
brierPlot(as.factor(SPFT$team))
summary(as.factor(SPFT$team))
ggplot(SPFT, aes(x = brier.avg, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
ggplot(SPFT, aes(x = Duration.min, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
ggplot(SPFT, aes(x = Duration.min.log, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
ggplot(SPFT, aes(x = time.fq.sec, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
ggplot(SPFT, aes(x = time.fq.sec.log, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "Brier score",
y = "Frequency") # labels))
mean(SPFT$time.fq.sec[SPFT$Group == "Treatment"])
SPFT$time.fq.sec[SPFT$Group == "Treatment"]
mean(SPFT$time.fq.sec[SPFT$Group == "Treatment"], na.rm = TRUE)
mean(SPFT$time.fq.sec[SPFT$Group == "Control"], na.rm = TRUE)
mean(SPFT$time.fq.sec.log[SPFT$Group == "Treatment"], na.rm = TRUE)
mean(SPFT$time.fq.sec.log[SPFT$Group == "Control"], na.rm = TRUE)
hypo3.time.plot <- ggplot(SPFT, aes(x = time.fq.sec.log, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( title = paste("Brier score distribution by ", substring(deparse(substitute(x)), 6)),
x = "log(time)",
y = "Frequency") # labels))
hypo3.time.plot
?t.test
t.test(SPFT$time.fq.sec.log[SPFT$Group == "Treatment"],
SPFT$time.fq.sec.log[SPFT$Group == "Control"],
alternative = "greater",
conf.level = 0.95)
t.test(SPFT$time.fq.sec.log[SPFT$Group == "Treatment"],
SPFT$time.fq.sec.log[SPFT$Group == "Control"],
alternative = "greater", var.equal = TRUE,
conf.level = 0.95)
hypo3.time.plot <- ggplot(SPFT, aes(x = time.fq.sec.log, fill = Group)) +
geom_density(alpha = 0.3) +
#geom_histogram(binwidth=.05, position="dodge", fill = "#C02F39") + # bar type
theme_bw() +
theme(axis.title = element_text(size=18), # Labels axis font size
axis.text = element_text(size=14)) +
labs( x = "log(time)",
y = "Frequency") # labels))
mean(SPFT$time.fq.sec.log[SPFT$Group == "Treatment"], na.rm = TRUE)
mean(SPFT$time.fq.sec.log[SPFT$Group == "Control"], na.rm = TRUE)
t.test.int.time <-  t.test(SPFT$time.fq.sec.log[SPFT$Group == "Treatment"],
SPFT$time.fq.sec.log[SPFT$Group == "Control"],
alternative = "greater", var.equal = TRUE,
conf.level = 0.95)
t.test.intervention.time <- paste("t(", t.test.int.time[[2]], ") = ",
round(t.test.int.time[[1]],2),
", p < ",
ifelse(round(t.test.int.time[[3]],4)< 0.001,
0.001,round(t.test.int.time[[3]],4)),
sep = "")
t.test.intervention.time
t.test.intervention.time <- paste(t.test.int.time[[5]][1], " < ",
t.test.int.time[[5]][2],
"t(", t.test.int.time[[2]], ") = ",
round(t.test.int.time[[1]],2),
", p < ",
ifelse(round(t.test.int.time[[3]],4)< 0.001,
0.001,round(t.test.int.time[[3]],4)),
sep = "")
t.test.intervention.time
t.test.intervention.time <- paste(round(t.test.int.time[[5]][2],1),
" < ",
round(t.test.int.time[[5]][1],1),
"t(", t.test.int.time[[2]], ") = ",
round(t.test.int.time[[1]],2),
", p < ",
ifelse(round(t.test.int.time[[3]],4)< 0.001,
0.001,round(t.test.int.time[[3]],4)),
sep = "")
t.test.intervention.time
t.test.intervention.time <- paste(round(t.test.int.time[[5]][2],2),
" < ",
round(t.test.int.time[[5]][1],2),
", t(", t.test.int.time[[2]], ") = ",
round(t.test.int.time[[1]],2),
", p < ",
ifelse(round(t.test.int.time[[3]],4)< 0.001,
0.001,round(t.test.int.time[[3]],4)),
sep = "")
t.test.intervention.time
