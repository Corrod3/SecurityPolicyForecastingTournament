rand(5,5)
ran(5,5)
rnorm(1)
replicate(10, rnorm(1))
replicate(10, rnorm(1))
replicate(10, rnorm(2))
matrix(rnorm(12),4,3)
(1:10)/10
(1:10)*2+3
tvector <- (1:20)*2-4
tvector <- tvector+replicate(20, rnorm(1))
clear
clear()
rm(list = ls(all = TRUE))
tvector <- (1:20)*2-4
tvector <- tvector+replicate(20, rnorm(1))
x1 <- (1:20)
lm
lm(tvector ~ x1)
rm(list = ls(all = TRUE))
rm(list = ls())
library(rvest)
library(dplyr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce <- url %>% read_html() %>%
html_nodes('.pane-content') %>%
html_text()
osce
view(osce)
print(osce)
rm(list = ls())
library(rvest)
library(dplyr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce <- url %>% read_html() %>%
html_nodes('.pane-content') %>%
html_text() %>% trim
rm(list = ls())
library(rvest)
library(dplyr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce <- url %>% read_html() %>%
html_nodes('.pane-content') %>%
html_text() %>% trim = T
rm(list = ls())
library(rvest)
library(dplyr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce <- url %>% read_html() %>%
html_nodes('.pane-content') %>%
html_text(trim = T)
print(osce)
rm(list = ls())
library(rvest)
library(dplyr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce <- url %>% read_html() %>%
html_nodes('.pane-node-body') %>%
html_text(trim = T)
print(osce)
rm(list = ls())
library(rvest)
library(dplyr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce.heading <- url %>% read_html() %>%
html_nodes('.content--header') %>%
html_text(trim = T)
osce.content <- url %>% read_html() %>%
html_nodes('.pane-node-body') %>%
html_text(trim = T)
print(osce.heading)
help(gsub)
osce.heading %>% gsub("\n", "")
osce.heading %>% gsub("\n", "")
gsub("\n", "", osce.heading)
install.packages("stringr")
rm(list = ls())
library(rvest)
library(dplyr)
library(stringr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce.heading <- url %>% read_html() %>%
html_nodes('.content--header') %>%
html_text(trim = T)
trash <- c("Facebook", "Twitter", "LinkedIn", "Google+", "Share", "English", "Русский", "Українська")
osce.heading <- gsub("\n", "", osce.heading)
osce.heading <- gsub(trash, "", osce.heading)
osce.content <- url %>% read_html() %>%
html_nodes('.pane-node-body') %>%
html_text(trim = T)
osce.heading <- gsub("[ - ] Latest from", "Latest from", osce.heading)
help("str_trim")
osce.heading <- gsub("[ - ]", "Latest from", osce.heading)
osce.heading <- gsub("[ - ]", "Latest from", osce.heading)
osce.heading <- gsub("[ - ]", "Latest from", osce.heading)
osce.heading <- gsub("[ - ]", "Latest from", osce.heading)
osce.heading <- gsub("[ - ]", "Latest from", osce.heading)
osce.heading <- gsub("[ - ]", "Latest from", osce.heading)
osce.heading <- sub("[ - ]", "Latest from", osce.heading)
osce.heading <- sub("[ - ]", "", osce.heading)
osce.content <- url %>% read_html() %>%
html_nodes('.pane-node-body') %>%
html_text(trim = T)
osce.heading <- sub("[ - ]", "", osce.heading)
osce.heading <- sub("[ - ]", "", osce.heading)
rm(list = ls())
library(rvest)
library(dplyr)
library(stringr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce.heading <- url %>% read_html() %>%
html_nodes('.content--header') %>%
html_text(trim = T)
trash <- c("Facebook", "Twitter", "LinkedIn", "Google+", "Share", "English", "Русский", "Українська")
osce.heading <- gsub("\n", "", osce.heading)
osce.heading <- sub("*Latest", "Latest", osce.heading)
osce.content <- url %>% read_html() %>%
html_nodes('.pane-node-body') %>%
html_text(trim = T)
osce.heading <- sub("*Latest", "Latest", osce.heading)
osce.heading <- gsub("*Latest", "Latest", osce.heading)
osce.heading <- gsub("^.*?Latest","Latest", osce.heading)
print heading
print(osce.heading)
osce.content <- gsub("\n", "", osce.content)
print(osce.content)
rm(list = ls())
rm(list = ls())
library(rvest)
library(dplyr)
library(stringr)
url <- "http://www.osce.org/ukraine-smm/276006"
# Get and parse expenses_table from the webpage
osce.heading <- url %>% read_html() %>%
html_nodes('.content--header') %>%
html_text(trim = T)
osce.heading <- gsub("\n", "", osce.heading)
osce.heading <- gsub("^.*?Latest","Latest", osce.heading)
osce.content <- url %>% read_html() %>%
html_nodes('.pane-node-body') %>%
html_text(trim = T)
osce.content <- gsub("\n", "", osce.content)
print(osce.content)
print(osce.heading)
install.packages("googleVis")
library(googleVis)
demo(googleVis)
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
help("gvisGeoChart")
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="DE",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
install.packages("devtools")
?postr
??postr
knitr::opts_chunk$set(echo = FALSE)
# Clear Global environment
rm(list=ls())
## Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
library(knitr)
source("main.R")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) +
guides(fill=guide_legend(title="New Legend Title"))
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_discrete(name = "New Legend Title")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_manual("legend_title")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) +
guide_legend(title="my awesome title")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) +
guides(fill=guide_legend(title=NULL))
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) #+
#guides(fill=guide_legend(title=NULL))
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(#legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_discrete(name="Experimental\nCondition")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(#legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
#colour = "legend title",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_continuous(name="Experimental\nCondition")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(#legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
colour = "legend title",
fill = "legend title",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_continuous(name="Experimental\nCondition")
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(#legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
#colour = "legend title",
fill = "legend title",
x = "Brier score",
y = "Frequency") # labels))
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(#legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
fill = "Participant group",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_continuous(name="Title", labels=c("1","2","3"))
ggplot(SB, aes(x = brier.avg, fill = part.group)) +
geom_histogram(binwidth=.1, position="dodge") + # bar type
#geom_density(alpha=.3) +
theme_bw() +
theme(#legend.title=element_blank(),
axis.title = element_text(size=18, colour = "#696969", family = "serif"), # Labels axis font size
axis.text = element_text(size=14, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs( # title = "Brier score distribution",
fill = "Participant group",
x = "Brier score",
y = "Frequency") # labels)) +
scale_fill_discrete(name="Title", labels=c("1","2","3"))
### Script for poster plots
source("main.R")
brier.plot
### Script for poster plots
# Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
# load main script
source("main.R")
brier.plot
?ggsave
ggsave(filename="plots/brierPlot.pdf", plot=brier.plot)
ggsave(filename="plots\brierPlot.pdf", plot=brier.plot)
ggsave(filename="brierPlot.pdf", plot=brier.plot)
ggsave(filename="plots/brierPlot.pdf", plot=brier.plot)
ggsave(filename="plots/corPlot.pdf", plot=cor.plot)
cor.plot
ggsave(filename="plots/bntPlot.pdf", plot=bnt.plot)
### Script for poster plots
# Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
# load main script
source("main.R")
# save brier score distribution
ggsave(filename="plots/brierPlot.pdf", plot=brier.plot)
# BNT Scores distribution
ggsave(filename="plots/bntPlot.pdf", plot=bnt.plot)
# Correlation Mct-Brier Scores
ggsave(filename="plots/corBrierMctPlot.pdf", plot=cor.brier.mct.plot)
# Correlation Brier log(time) correlation
ggsave(filename="plots/corBrierTimeLogPlot.pdf", plot=cor.brier.time.log.plot)
# Correlation Brier linear time
ggsave(filename="plots/corBrierTimePlot.pdf", plot=cor.brier.time.plot)
# Hypothesis 3 time
ggsave(filename="plots/hypo3TimePlot.pdf", plot=hypo3.time.plot)
### Script for poster plots
# Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
# load main script
source("main.R")
# save brier score distribution
ggsave(filename="plots/brierPlot.pdf", plot=brier.plot)
# BNT Scores distribution
# Distribution of bnt scores
bnt.plot2 <- ggplot(SPFT, aes(x = bnt.s)) +
geom_bar(fill = "#C02F39") +
theme_bw() +
theme(axis.title = element_text(size=22, colour = "#696969"), # Labels axis font size
axis.text = element_text(size=18, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969")) +
labs(title = "Distribution of results Berlin Numeracy Test (BNT)",
x = "BNT Score (# of correct answers)",
y = "# of respondents") # labels
ggsave(filename="plots/bntPlot.pdf", plot=bnt.plot2)
# Correlation Mct-Brier Scores
ggsave(filename="plots/corBrierMctPlot.pdf", plot=cor.brier.mct.plot)
# Correlation Brier log(time) correlation
ggsave(filename="plots/corBrierTimeLogPlot.pdf", plot=cor.brier.time.log.plot)
# Correlation Brier linear time
ggsave(filename="plots/corBrierTimePlot.pdf", plot=cor.brier.time.plot)
# Hypothesis 3 time
ggsave(filename="plots/hypo3TimePlot.pdf", plot=hypo3.time.plot)
bnt.plot2
ggplot(SPFT, aes(x = bnt.s)) +
geom_bar(fill = "#C02F39") +
theme_bw() +
theme(axis.title = element_text(size=22, colour = "#696969"), # Labels axis font size
axis.text = element_text(size=18, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969"),
title = element_text(size=24, colour = "#696969")) +
labs(title = "Distribution of results Berlin Numeracy Test (BNT)",
x = "BNT Score (# of correct answers)",
y = "# of respondents") # labels
### Script for poster plots
# Setting Working directory
try(setwd("D:/Eigene Datein/Dokumente/Uni/Hertie/Materials/Master thesis/SecurityPolicyForecastingTournament"), silent = TRUE)
# load main script
source("main.R")
# save brier score distribution
ggsave(filename="plots/brierPlot.pdf", plot=brier.plot)
# BNT Scores distribution
# Distribution of bnt scores
bnt.plot2 <- ggplot(SPFT, aes(x = bnt.s)) +
geom_bar(fill = "#C02F39") +
theme_bw() +
theme(axis.title = element_text(size=22, colour = "#696969"), # Labels axis font size
axis.text = element_text(size=18, colour = "#696969"),
axis.line = element_line(colour = "#696969"),
axis.ticks = element_line(colour = "#696969"),
title = element_text(size=24, colour = "#696969")) +
labs(title = "Distribution of Berlin Numeracy Test results",
x = "BNT Score (# of correct answers)",
y = "# of respondents") # labels
ggsave(filename="plots/bntPlot.pdf", plot=bnt.plot2)
# Correlation Mct-Brier Scores
ggsave(filename="plots/corBrierMctPlot.pdf", plot=cor.brier.mct.plot)
# Correlation Brier log(time) correlation
ggsave(filename="plots/corBrierTimeLogPlot.pdf", plot=cor.brier.time.log.plot)
# Correlation Brier linear time
ggsave(filename="plots/corBrierTimePlot.pdf", plot=cor.brier.time.plot)
# Hypothesis 3 time
ggsave(filename="plots/hypo3TimePlot.pdf", plot=hypo3.time.plot)
